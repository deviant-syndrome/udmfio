
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BLOCK_COMMENT COMMENT FALSE FLOAT IDENTIFIER INTEGER LBRACE QUOTED_STRING RBRACE SEMICOLON TRUEtranslation_unit : global_expr_listglobal_expr_list : global_expr global_expr_listglobal_expr_list : global_expr : blockglobal_expr : assignment_exprblock : IDENTIFIER LBRACE expr_list RBRACEexpr_list : assignment_expr expr_listexpr_list : assignment_expr : IDENTIFIER ASSIGN value SEMICOLONassignment_expr : IDENTIFIER SEMICOLONvalue : INTEGERvalue : FLOATvalue : QUOTED_STRINGvalue : TRUEvalue : FALSE'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,7,10,20,22,],[-3,0,-1,-3,-4,-5,-2,-10,-6,-9,]),'IDENTIFIER':([0,3,4,5,8,10,13,20,22,],[6,6,-4,-5,11,-10,11,-6,-9,]),'LBRACE':([6,],[8,]),'ASSIGN':([6,11,],[9,9,]),'SEMICOLON':([6,11,14,15,16,17,18,19,],[10,10,22,-11,-12,-13,-14,-15,]),'RBRACE':([8,10,12,13,21,22,],[-8,-10,20,-8,-7,-9,]),'INTEGER':([9,],[15,]),'FLOAT':([9,],[16,]),'QUOTED_STRING':([9,],[17,]),'TRUE':([9,],[18,]),'FALSE':([9,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'global_expr_list':([0,3,],[2,7,]),'global_expr':([0,3,],[3,3,]),'block':([0,3,],[4,4,]),'assignment_expr':([0,3,8,13,],[5,5,13,13,]),'expr_list':([8,13,],[12,21,]),'value':([9,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> global_expr_list','translation_unit',1,'p_translation_unit','parser.py',95),
  ('global_expr_list -> global_expr global_expr_list','global_expr_list',2,'p_global_expr_list','parser.py',100),
  ('global_expr_list -> <empty>','global_expr_list',0,'p_global_expr_list_empty','parser.py',105),
  ('global_expr -> block','global_expr',1,'p_global_expr_block','parser.py',110),
  ('global_expr -> assignment_expr','global_expr',1,'p_global_expr_assignment','parser.py',115),
  ('block -> IDENTIFIER LBRACE expr_list RBRACE','block',4,'p_block','parser.py',120),
  ('expr_list -> assignment_expr expr_list','expr_list',2,'p_expr_list','parser.py',125),
  ('expr_list -> <empty>','expr_list',0,'p_expr_list_empty','parser.py',130),
  ('assignment_expr -> IDENTIFIER ASSIGN value SEMICOLON','assignment_expr',4,'p_assignment_expr','parser.py',135),
  ('assignment_expr -> IDENTIFIER SEMICOLON','assignment_expr',2,'p_assignment_expr_nil','parser.py',140),
  ('value -> INTEGER','value',1,'p_value_integer','parser.py',145),
  ('value -> FLOAT','value',1,'p_value_float','parser.py',150),
  ('value -> QUOTED_STRING','value',1,'p_value_quoted_string','parser.py',155),
  ('value -> TRUE','value',1,'p_value_boolean_true','parser.py',160),
  ('value -> FALSE','value',1,'p_value_boolean_false','parser.py',165),
]
