vertex
{
  zfloor = <float>;         // Floor height at this vertex. Only applies to triangular sectors
  zceiling = <float>;       // Ceiling height at this vertex. Only applies to triangular sectors
}

linedef
{
  alpha = <float>;            // Translucency of this line, default is 1.0
  renderstyle = <string>;     // Render style, can be "translucent" or "add",
                              // default is "translucent".
  playeruseback = <bool> ;    // New SPAC flag, true = player can use from back side.
  anycross = <bool>;          // New SPAC flag, true = any non-projectile
                              // crossing will trigger this line
  monsteractivate = <bool>;   // Monsters can trigger this line.
                              // For compatibility only because this flag's
                              // semantics can not be fully reproduced with
                              // explicit trigger flags.
  blockplayers = <bool>;      // Line blocks players' movement.
  blockeverything = <bool>;   // Line blocks everything.
  firstsideonly = <bool>;     // Line can only be triggered from the front side.
  zoneboundary = <bool>;      // Line is a boundary for sound reverb zones.
  clipmidtex = <bool>;        // Line's mid textures are clipped to floor and ceiling.
  wrapmidtex = <bool>;        // Line's mid textures are wrapped.
  midtex3d = <bool>;          // Actors can walk on mid texture.
  midtex3dimpassible = <bool>;// Used in conjuction with midtex3d - causes the mid
                              // texture to behave like an impassable line (projectiles
                              // pass through it).
  checkswitchrange = <bool>;  // Switches can only be activated when vertically reachable.
  blockprojectiles = <bool>;  // Line blocks all projectiles
  blockuse = <bool>;          // Line blocks all use actions
  blocksight = <bool>;        // Line blocks monster line of sight
  blockhitscan = <bool>;      // Line blocks hitscan attacks
  locknumber = <int>;         // Line special is locked
  arg0str = <string>;         // Alternate string-based version of arg0
  moreids = <string>;         // Additional line IDs, specified as a space separated list of numbers (e.g. "2 666 1003 4505")

  transparent   = <bool>;     // true = line is a Strife transparent line (alpha 0.25)

  automapstyle = <integer>;   // Explicit automap style. Possible values can be
                              //  0: Automap style is based on line properties (default).
                              //  1: One-sided wall.
                              //  2: Two-sided wall.
                              //  3: Floor levels of front and back sectors are different.
                              //  4: Ceiling levels of front and back sectors are different.
                              //  5: 3D floor border.
                              //  6: Wall with special non-door action.
                              //  7: Secret door.
                              //  8: Wall not seen yet.
                              //  9: Locked door.
                              // 10: Intra-level teleporter.
                              // 11: Inter-level or game-ending teleporter.
                              // 12: Unexplored secret wall.
                              // 13: Portal line.
  revealed = <bool>;          // true = line is initially visible on automap.
  noskywalls = <bool>;        // true = skies are not drawn above or below this line
  drawfullheight = <bool>;    // true = draw the maximum height instead of the minimum height

  health = <int>;             // Amount of hitpoints for this line.
  healthgroup = <int>;        // ID of destructible object to synchronize hitpoints (optional, default is 0)
  damagespecial = <bool>;     // This line will call special if having health>0 and receiving damage
  deathspecial = <bool>;      // This line will call special if health was reduced to 0

  * Note about arg0str

  For lines with ACS specials (80-86 and 226), if arg0str is present and non-null, it
  will be used as the name of the script to execute, and arg0 will be ignored.
}

sidedef
{
  scalex_top = <float>;            // X scale for upper texture, Default = 1.0.
  scaley_top = <float>;            // Y scale for upper texture, Default = 1.0.
  scalex_mid = <float>;            // X scale for mid texture, Default = 1.0.
  scaley_mid = <float>;            // Y scale for mid texture, Default = 1.0.
  scalex_bottom = <float>;         // X scale for lower texture, Default = 1.0.
  scaley_bottom = <float>;         // Y scale for lower texture, Default = 1.0.
  offsetx_top = <float>;           // X offset for upper texture, Default = 0.0.
  offsety_top = <float>;           // Y offset for upper texture, Default = 0.0.
  offsetx_mid = <float>;           // X offset for mid texture, Default = 0.0.
  offsety_mid = <float>;           // Y offset for mid texture, Default = 0.0.
  offsetx_bottom = <float>;        // X offset for lower texture, Default = 0.0.
  offsety_bottom = <float>;        // Y offset for lower texture, Default = 0.0.
                                   // When global texture offsets are used they will
                                   // be added on top of these values.
  light = <integer>;               // This side's light level. Default is 0.
  lightabsolute = <bool>;          // true = 'light' is an absolute value. Default is
                                   // relative to the owning sector's light level.
  light_top = <integer>;           // This side's top tier light level. Default is 0.
  lightabsolute_top = <bool>;      // true = 'light_top' is an absolute value. Default is
                                   // relative to the sidedef's resulting light level.
  light_mid = <integer>;           // This side's mid tier light level. Default is 0.
  lightabsolute_mid = <bool>;      // true = 'light_mid' is an absolute value. Default is
                                   // relative to the sidedef's resulting light level.
  light_bottom = <integer>;        // This side's bottom tier light level. Default is 0.
  lightabsolute_bottom = <bool>;   // true = 'light_bottom' is an absolute value. Default is
                                   // relative to the sidedef's resulting light level.
  lightfog = <bool>;               // true = This side's relative lighting is used even in
                                   // foggy sectors. Default is to disable relative
                                   // lighting in foggy sectors.
  nofakecontrast = <bool>;         // Disables use of fake contrast on this sidedef.
  smoothlighting = <bool>;         // Use smooth fake contrast.
  clipmidtex = <bool>;             // Side's mid textures are clipped to floor and ceiling.
  wrapmidtex = <bool>;             // Side's mid textures are wrapped.
  nodecals = <bool>;               // Disables decals on the sidedef.

  nogradient_top = <bool>;	    // disables color gradient on upper tier. (Hardware rendering only.)
  flipgradient_top = <bool>;    // flips gradient colors on upper tier. (Hardware rendering only.)
  clampgradient_top = <bool>;   // clamps gradient on upper tier to actual bounds (default is the entire front sector height, hardware rendering only.)
  useowncolors_top = <bool>;    // Set to 1 to use the colors set in the sidedef. Default is using the colors from the owning sector.
  uppercolor_top = <int>;       // Material color of the top of the upper tier.
  lowercolor_top = <int>;       // Material color of the bottom of the upper tier. (Hardware rendering only.)

  nogradient_mid = <bool>;	    // disables color gradient on middle tier. (Hardware rendering only.)
  flipgradient_mid = <bool>;    // flips gradient colors on middle tier. (Hardware rendering only.)
  clampgradient_mid = <bool>;   // clamps gradient on middle tier to actual bounds (default is the entire front sector height, hardware rendering only.)
  useowncolors_mid = <bool>;    // Set to 1 to use the colors set in the sidedef. Default is using the colors from the owning sector.
  uppercolor_mid = <int>;       // Material color of the top of the middle tier.
  lowercolor_mid = <int>;       // Material color of the bottom of the middle tier. (Hardware rendering only.)

  nogradient_bottom = <bool>;   // disables color gradient on lower tier. (Hardware rendering only.)
  flipgradient_bottom = <bool>; // flips gradient colors on lower tier. (Hardware rendering only.)
  clampgradient_bottom = <bool>;// clamps gradient on lower tier to actual bounds (default is the entire front sector height, hardware rendering only.)
  useowncolors_bottom = <bool>; // Set to 1 to use the colors set in the sidedef. Default is using the colors from the owning sector.
  uppercolor_bottom = <int>;    // Material color of the top of the lower tier.
  lowercolor_bottom = <int>;    // Material color of the bottom of the lower tier. (Hardware rendering only.)

  useowncoloradd_top = <bool>;  // Controls where the advanced colorization properties are taken from.
  useowncoloradd_mid = <bool>;  // 0: From the containing sector, 1: from the given part of the linedef itself
  useowncoloradd_bottom = <bool>;  // Default for all 3 is 0.
  coloradd_top = <int>;         // Additive material color to apply to top section of sidedef. Default is black (0x000000)
  coloradd_mid = <int>;         // Additive material color to apply to middle section of sidedef. Default is black (0x000000)
  coloradd_bottom = <int>;      // Additive material color to apply to bottom section of sidedef. Default is black (0x000000)
  colorization_top = <int>;     // Sets a colorization record for the upper texture. Colorization records must be defined in TEXTURES.
  colorization_mid = <int>;     // Sets a colorization record for the middle texture. Colorization records must be defined in TEXTURES.
  colorization_bottom = <int>;  // Sets a colorization record for the lower texture. Colorization records must be defined in TEXTURES.
}

sector
{
  xpanningfloor = <float>;        // X texture offset of floor texture, Default = 0.0.
  ypanningfloor = <float>;        // Y texture offset of floor texture, Default = 0.0.
  xpanningceiling = <float>;      // X texture offset of ceiling texture, Default = 0.0.
  ypanningceiling = <float>;      // Y texture offset of ceiling texture, Default = 0.0.
  xscalefloor = <float>;          // X texture scale of floor texture, Default = 1.0.
  yscalefloor = <float>;          // Y texture scale of floor texture, Default = 1.0.
  xscaleceiling = <float>;        // X texture scale of ceiling texture, Default = 1.0.
  yscaleceiling = <float>;        // Y texture scale of ceiling texture, Default = 1.0.
  rotationfloor = <float>;        // Rotation of floor texture in degrees, Default = 0.0.
  rotationceiling = <float>;      // Rotation of ceiling texture in degrees, Default = 0.0.
  ceilingplane_a = <float>;       // Define the plane equation for the sector's ceiling. Default is a horizontal plane at 'heightceiling'.
  ceilingplane_b = <float>;       // 'heightceiling' will still be used to calculate texture alignment.
  ceilingplane_c = <float>;       // The plane equation will only be used if all 4 values are given.
  ceilingplane_d = <float>;       // The plane is defined as a*x + b*y + c*z + d = 0 with the normal vector pointing downward.
  floorplane_a = <float>;         // Define the plane equation for the sector's floor. Default is a horizontal plane at 'heightfloor'.
  floorplane_b = <float>;         // 'heightfloor' will still be used to calculate texture alignment.
  floorplane_c = <float>;         // The plane equation will only be used if all 4 values are given.
  floorplane_d = <float>;         // The plane is defined as a*x + b*y + c*z + d = 0 with the normal vector pointing upward.
  lightfloor = <integer>;         // The floor's light level. Default is 0.
  lightceiling = <integer>;       // The ceiling's light level. Default is 0.
  lightfloorabsolute = <bool>;    // true = 'lightfloor' is an absolute value. Default is
                                  // relative to the owning sector's light level.
  lightceilingabsolute = <bool>;  // true = 'lightceiling' is an absolute value. Default is
                                  // relative to the owning sector's light level.
  alphafloor = <float>;           // translucency of floor plane (only has meaning with Sector_SetPortal) Default is 1.0.
  alphaceiling = <float>;         // translucency of ceiling plane (only has meaning with Sector_SetPortal) Default is 1.0.
  renderstylefloor = <string>;    // floor plane renderstyle (only has meaning with Sector_SetPortal); not implemented yet in software renderer
                                  // can be "translucent" or "add", default is "translucent".
  renderstyleceiling = <string>;  // ceiling plane renderstyle (only has meaning with Sector_SetPortal); not implemented yet in software renderer
                                  // can be "translucent" or "add", default is "translucent".
  gravity = <float>;              // Sector's gravity. Default is 1.0.
  lightcolor = <integer>;         // Sector's light color as RRGGBB value, default = 0xffffff.
  fadecolor = <integer>;          // Sector's fog color as RRGGBB value, default = 0x000000.
  desaturation = <float>;         // Color desaturation factor. 0 = none, 1 = full, default = 0.
  silent = <bool>;                // Actors in this sector make no sound,
  nofallingdamage = <bool>;       // Falling damage is disabled in this sector
  noattack = <bool>;              // Blocks monster attacks in this sector.
  dropactors = <bool>;            // Actors drop with instantly moving floors (*)
  norespawn = <bool>;             // Players can not respawn in this sector
  soundsequence = <string>;       // The sound sequence to play when this sector moves. Placing a
                                  // sound sequence thing in the sector will override this property.
  hidden = <bool>;                // if true this sector will not be drawn on the textured automap.
  waterzone = <bool>;             // Sector is under water and swimmable
  moreids = <string>;             // Additional sector IDs/tags, specified as a space separated list of numbers (e.g. "2 666 1003 4505")
  damageamount = <int>;           // Amount of damage inflicted by this sector, default = 0. If this is 0, all other damage properties will be ignored.
                                  // Setting damage through these properties will override any damage set through 'special'.
                                  // Setting damageamount to a negative value will create a healing sector.
  damagetype = <string>;          // Damage type for sector damage, Default = "None". (generic damage)
  damageinterval = <int>;         // Interval in tics between damage application, default = 32.
  leakiness = <int>;              // Probability of leaking through radiation suit (0 = never, 256 = always), default = 0.
  damageterraineffect = <bool>;   // Will spawn a terrain splash when damage is inflicted. Default = false.
  damagehazard = <bool>;          // Changes damage model to Strife's delayed damage for the given sector. Default = false.
  floorterrain = <string>;        // Sets the terrain for the sector's floor. Default = 'use the flat texture's terrain definition.'
  ceilingterrain = <string>;      // Sets the terrain for the sector's ceiling. Default = 'use the flat texture's terrain definition.'
  floor_reflect = <float>;        // reflectiveness of floor (OpenGL only, not functional on sloped sectors)
  ceiling_reflect = <float>;      // reflectiveness of ceiling (OpenGL only, not functional on sloped sectors)
  fogdensity = <integer>;         // Sets an explicit fog density for the sector, overriding the default calculation from the light level. Value range is 0-510,
                                  // 0 meaning that the default is to be used, 2 equalling the density of a light level of 250, and 255 equalling the density of
                                  // a light level of 0.  (OpenGL only)
  floorglowcolor = <integer>;     // Sector's floor glow color as RRGGBB value, default = 'use texture's definition'. Set to -1 to disable glowing. (OpenGL 3.x and newer only)
  floorglowheight = <float>;      // Height of floor glow. This only has an effect for the sector's own glow color, but not for a texture based glow. (OpenGL 3.x and newer only)
  ceilingglowcolor = <integer>;   // Sector's ceiling glow color as RRGGBB value, default = 'use texture's definition'. Set to -1 to disable glowing. (OpenGL 3.x and newer only)
  ceilingglowheight = <float>;    // Height of ceiling glow. This only has an effect for the sector's own glow color, but not for a texture based glow. (OpenGL 3.x and newer only)
  color_floor = <int>;            // Material color of sector's floor. Default is white (0xffffff)
  color_ceiling = <int>;          // Material color of sector's ceiling. Default is white (0xffffff)
  color_walltop = <int>;          // Material color of top of sector's sidedefs. In OpenGL 2.x and the software renderer this will define the entire wall's color) Default is white (0xffffff)
  color_wallbottom = <int>;       // Material color of bottom of sector's sidedefs (OpenGL 3.x and later only) Default is white (0xffffff)
  color_sprites = <int>;          // Material color of sprites in sector. Default is white (0xffffff)

  coloradd_floor = <int>;         // Additive material color applied to the sector floor. Default is black (0x000000)
  coloradd_ceiling = <int>;       // Additive material color applied to the sector ceiling. Default is black (0x000000)
  coloradd_sprites = <int>;       // Additive material color applied to sprites within the sector. Default is black (0x000000)
  coloradd_walls = <int>;         // Additive material color applied to walls within the sector. Default is black (0x000000)

  colorization_floor = <int>;     // Sets a colorization record for the floor texture. Colorization records must be defined in TEXTURES.
  colorization_ceiling = <int>;     // Sets a colorization record for the ceiling texture. Colorization records must be defined in TEXTURES.

  noskywalls = <bool>;            // If true, do not draw skybox walls above/below this sector

  portal_ceil_blocksound = <bool>;     // ceiling portal blocks sound.
  portal_ceil_disabled = <bool>;       // ceiling portal disabled.
  portal_ceil_nopass = <bool>;         // ceiling portal blocks movement if true.
  portal_ceil_norender = <bool>;       // ceiling portal not rendered.
  portal_ceil_overlaytype = <string>;  // defines translucency style, can either be "translucent" or "additive". Default is "translucent".
  portal_floor_blocksound = <bool>;    // floor portal blocks sound.
  portal_floor_disabled = <bool>;      // floor portal disabled.
  portal_floor_nopass = <bool>;        // ceiling portal blocks movement if true.
  portal_floor_norender = <bool>;      // ceiling portal not rendered.
  portal_floor_overlaytype = <string>; // defines translucency style, can either be "translucent" or "additive". Default is "translucent".

  healthfloor = <int>;            // Amount of hitpoints for this sector (includes floor and bottom-outside linedef sides)
  healthfloorgroup = <int>;       // ID of destructible object to synchronize hitpoints (optional, default is 0)
  healthceiling = <int>;          // Amount of hitpoints for this sector (includes ceiling and top-outside linedef sides)
  healthceilinggroup = <int>;     // ID of destructible object to synchronize hitpoints (optional, default is 0)

  * Note about dropactors

  The spec requires this to be false by default. Currently, however, ZDoom assumes this to be true
  for Doom format maps so any map converter converting to the ZDoomTranslated namespace should
  set this flag for each tagged sector.

}

thing
{
  skill# = <bool>           // Unlike the base spec, # can range from 1-16.
  class# = <bool>           // Unlike the base spec, # can range from 1-16.
  conversation = <int>      // Assigns a conversation dialogue to this thing.
                            // Parameter is the conversation ID, 0 meaning none.
  countsecret = <bool>;     // Picking up this actor counts as a secret.
  arg0str = <string>;       // Alternate string-based version of arg0
  gravity = <float>;        // Set per-actor gravity. Positive values are multiplied with the class's property,
                            // negative values are used as their absolute. Default = 1.0.

  health = <float>;         // Set per-actor health. Positive values are multiplied with the class's property,
                            // negative values are used as their absolute. Default = 1.

  renderstyle = <string>;   // Set per-actor render style, overriding the class default. Possible values can be "normal",
                            // "none", "add" or "additive", "subtract" or "subtractive", "stencil", "translucentstencil",
                            // "addstencil", "shaded", "addshaded", "translucent", "fuzzy", "optfuzzy", "soultrans" and "shadow".
                            // Default is an empty string for no change.
  fillcolor = <integer>;    // Fill color used by the "stencil", "addstencil" and "translucentstencil" rendestyles, as RRGGBB value, default = 0x000000.
  alpha = <float>;          // Translucency of this actor (if applicable to renderstyle), default is 1.0.
  score = <int>;            // Score value of this actor, overriding the class default if not null. Default = 0.
  pitch = <integer>;        // Pitch of thing in degrees. Default = 0 (horizontal).
  roll = <integer>;         // Pitch of thing in degrees. Default = 0 (horizontal).
  scalex = <float>;         // Horizontal scaling on thing. Default = 0 (ignored).
  scaley = <float>;         // Vertical scaling on thing. Default = 0 (ignored).
  scale = <float>;          // Vertical and horizontal scaling on thing. Default = 0 (ignored).
  floatbobphase = <int>;    // Sets the thing's floatbobphase. Valid phase values are 0-63. Default = -1 (use actor class default).

  * Note about arg0str

  For things with ACS specials (80-86 and 226), if arg0str is present and non-null, it
  will be used as the name of the script to execute, and arg0 will be ignored.
  On dynamic lights, arg0str can be used to set a color by name, this will supersede all args which are normally used to define a color.
}